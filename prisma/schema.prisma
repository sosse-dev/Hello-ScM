// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String?
  desc          String?
  follower      Follow[]        @relation("follower")
  following     Follow[]        @relation("following")
  online        Boolean         @default(false)
  chat          DirectMessage[] @relation("sender")
  sender        Message[]       @relation("sender")
  receiver      Message[]       @relation("receiver")
  likes         Like[]
  comments      Comment[]
  post          Post[]
  report        Report[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId
}

model Message {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  chat       DirectMessage[] @relation("directMessage")
  sender     User?           @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String?         @db.ObjectId
  receiver   User?           @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?         @db.ObjectId
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chat      String
  message   Message  @relation(name: "directMessage", fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.ObjectId
  sender    User?    @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String?  @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String?
  image     String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  report    Report[]
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  category  String?  @default("NOT CATEGORIZED")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}
